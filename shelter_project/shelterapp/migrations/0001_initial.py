# Generated by Django 5.1.3 on 2024-12-02 23:22

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Adopter',
            fields=[
                ('adopterID', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('firstName', models.CharField(max_length=100)),
                ('lastName', models.CharField(max_length=100)),
                ('phoneNumber', models.IntegerField()),
                ('email', models.EmailField(max_length=254)),
                ('address', models.TextField()),
                ('password', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Animal',
            fields=[
                ('animalID', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('species', models.CharField(max_length=100)),
                ('breed', models.CharField(max_length=100)),
                ('age', models.IntegerField()),
                ('gender', models.CharField(max_length=10)),
                ('dateOfArrival', models.DateField()),
                ('adoptedOrNot', models.IntegerField()),
                ('healthStatus', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('locationID', models.IntegerField()),
                ('reasonForIntake', models.CharField(max_length=100)),
                ('adoptionFee', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='ShelterLocation',
            fields=[
                ('locationID', models.AutoField(primary_key=True, serialize=False)),
                ('locationName', models.CharField(max_length=100)),
                ('address', models.TextField()),
                ('phoneNumber', models.IntegerField()),
                ('capacity', models.IntegerField()),
                ('currentOccupancy', models.IntegerField()),
                ('funds', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('staffID', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('firstName', models.CharField(max_length=100)),
                ('lastName', models.CharField(max_length=100)),
                ('position', models.CharField(max_length=100)),
                ('phoneNumber', models.IntegerField()),
                ('email', models.EmailField(max_length=254)),
                ('hireDate', models.DateField()),
                ('salary', models.IntegerField()),
                ('workLocation', models.IntegerField()),
                ('status', models.CharField(max_length=50)),
                ('password', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_staff_user', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Donation',
            fields=[
                ('donationID', models.AutoField(primary_key=True, serialize=False)),
                ('amount', models.IntegerField()),
                ('donationDate', models.DateField()),
                ('name', models.CharField(max_length=100)),
                ('phoneNumber', models.IntegerField()),
                ('email', models.EmailField(max_length=254)),
                ('address', models.TextField()),
                ('locationID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shelterapp.shelterlocation')),
            ],
        ),
        migrations.CreateModel(
            name='MedicalRecord',
            fields=[
                ('medicalID', models.AutoField(primary_key=True, serialize=False)),
                ('diagnosis', models.CharField(max_length=200)),
                ('treatment', models.TextField()),
                ('date', models.DateField()),
                ('note', models.TextField()),
                ('animalID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shelterapp.animal')),
                ('staffID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shelterapp.staff')),
            ],
        ),
        migrations.CreateModel(
            name='AdoptionRequest',
            fields=[
                ('adoptionID', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('dateAdopted', models.DateField()),
                ('adoptionStatus', models.CharField(max_length=100)),
                ('adopterID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shelterapp.adopter')),
                ('animalID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shelterapp.animal')),
                ('staffAdministrator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shelterapp.staff')),
            ],
        ),
        migrations.CreateModel(
            name='Paycheck',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payDate', models.DateField()),
                ('hoursWorked', models.IntegerField()),
                ('amount', models.IntegerField()),
                ('staffID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shelterapp.staff')),
            ],
            options={
                'unique_together': {('payDate', 'staffID')},
            },
        ),
    ]
